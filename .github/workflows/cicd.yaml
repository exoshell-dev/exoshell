name: CI/CD

on:
  push:
    tags:
      - v*
      - desktop/v*
    # - cli/v*
    # - mobile/v*
    # - web/v*
  pull_request:
  workflow_dispatch:
    inputs:
      # environment:
      #   description: Environment to deploy
      #   type: choice
      #   default: prod
      #   options:
      #     - dev
      #     - staging
      #     - prod
      skip-ci:
        description: Skip CI step y/n ?
        type: boolean
        default: false
      always-cd:
        description: Force CD step y/n ?
        type: boolean
        default: false
      # dry-run-cd:
      #   description: Dry-run CD step y/n ?
      #   type: boolean
      #   default: false
      version:
        description: Package semver version (relevant for workflow_dispatch. Github tag and release must exist. Example value -> '1.0.0' for 'v1.0.0' tag and 'ExoShell v1.0.0' release)
        type: string
        default: ''
      release-type:
        description: Type of release
        type: choice
        default: stable
        options:
          - stable
          - draft
          - prerelease
      target-builds:
        description: Target builds
        type: choice
        default: all
        options:
          - all
          - desktop
          - cli
          - mobile
          - web
      # Missing architectures: Linux [ARMv7, ARMv8], MacOs [Universal]
      target-platforms:
        description: Target platforms (relevant for desktop)
        type: choice
        default: all
        options:
          - all
          - linux
          - macos
          - windows

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  setup:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    permissions:
      contents: read
    outputs:
      # environment: ${{ steps.set_vars.outputs.environment }}
      # dry-run-cd: ${{ steps.set_vars.outputs.dry-run-cd }}
      version: ${{ steps.set_vars.outputs.version }}
      release-type: ${{ steps.set_vars.outputs.release-type }}
      should-ci: ${{ steps.set_vars.outputs.should-ci }}
      should-desktop-cd: ${{ steps.set_vars.outputs.should-desktop-cd }}
      target-platforms-matrix: ${{ steps.set_vars.outputs.target-platforms-matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install
        working-directory: .github/scripts
      - name: Compute variables
        uses: actions/github-script@v7
        id: set_vars
        with:
          script: (await import('${{ github.workspace }}/.github/scripts/compute-variables.mjs')).default(context, core)

  ci:
    runs-on: ubuntu-22.04
    if: needs.setup.outputs.should-ci == 'true'
    timeout-minutes: 5
    permissions:
      contents: read
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v1

      - name: Install > Lint > Test
        run: |
          bun install --frozen-lockfile
          bun run ci

  desktop-cd:
    runs-on: ${{ matrix.settings.platform}}
    if: needs.setup.outputs.should-desktop-cd == 'true'
    timeout-minutes: 60
    permissions:
      contents: write
    strategy:
      # TODO should be true, false while we iterate
      fail-fast: false
      matrix: ${{fromJson(needs.setup.outputs.target-platforms-matrix)}}
    needs:
      - setup
      - ci
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - uses: oven-sh/setup-bun@v1

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install
        run: |
          bun install --frozen-lockfile

      - name: Install dependencies (Linux only)
        if: matrix.settings.platform == 'ubuntu-22.04'
        # libwebkit2gtk-4.0-dev == needed for Tauriv1
        # libwebkit2gtk-4.1-dev == needed for Tauriv2
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: '${{ github.workspace }}/apps/desktop/src-tauri -> target'

      - name: Build and release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: ./apps/desktop
          tauriScript: bun tauri
          args: ${{ matrix.settings.args }}
          tagName: v${{ needs.setup.outputs.version }}
          releaseName: 'ExoShell v${{ needs.setup.outputs.version }}'
          appVersion: ${{ needs.setup.outputs.version }}
          releaseDraft: ${{ matrix.settings.release-type == 'draft' && true || false }}
          prerelease: ${{ matrix.settings.release-type == 'prerelease' && true || false }}
          # releaseBody: ''
          # releaseId:
          # distPath:
          # iconPath:
          # bundleIdentifier:
          # includeDebug:
          # includeRelease:
          # includeUpdaterJson: true
          # updaterJsonPreferNsis:
          # updaterJsonKeepUniversal:
