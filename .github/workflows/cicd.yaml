name: CI/CD

on:
  push:
    tags:
      - v*
      - desktop/v*
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

permissions: {}

jobs:
  ci:
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    outputs:
      shouldRelease: ${{ steps.compute_variables.outputs.shouldRelease }}
      appVersion: ${{ steps.compute_variables.outputs.appVersion }}
      cdTauriMatrix: ${{ steps.compute_variables.outputs.cdTauriMatrix }}
      rustVersion: ${{ steps.compute_variables.outputs.rustVersion }}
      releaseVersion: ${{ steps.compute_variables.outputs.releaseVersion }}
    env:
      SCCACHE_GHA_ENABLED: true
      RUSTC_WRAPPER: sccache
    steps:
      - uses: actions/checkout@v4
      - uses: jdx/mise-action@v2
      - uses: Mozilla-Actions/sccache-action@v0.0.4
      - run: bun install --frozen-lockfile
      - name: Compute variables
        uses: actions/github-script@v7
        id: compute_variables
        with:
          script: (await import('${{ github.workspace }}/.github/scripts/computeVariables.mjs')).default(context, core)
      - name: Install Tauri system dependencies
        uses: ./.github/actions/tauri-install-system-deps
      - name: Lint & Test
        run: |
          bun run ci
          cargo test --locked ${{ github.workspace }}

  cd-tauri:
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.ci.outputs.cdTauriMatrix) }}
    runs-on: ${{ matrix.platform}}
    timeout-minutes: 60
    needs: [ci]
    env:
      SCCACHE_GHA_ENABLED: true
      RUSTC_WRAPPER: sccache
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ needs.ci.outputs.rustVersion }}
          targets: ${{ matrix.rustTargets || matrix.tauriBuildTarget }}
      - uses: Mozilla-Actions/sccache-action@v0.0.4
      - run: bun install --frozen-lockfile
      - name: Install Tauri system dependencies
        uses: ./.github/actions/tauri-install-system-deps
      - name: Generate Typescript types from Rust
        run: bun run gen:types
      - name: Inject app version in Cargo.toml
        run: sed -i=bak 's/version = "0.0.0"/version = "${{ needs.ci.outputs.appVersion }}"/' Cargo.toml
      - uses: tauri-apps/tauri-action@v0
        id: tauri
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: ./apps/desktop
          appVersion: ${{ needs.ci.outputs.appVersion }}
          tauriScript: bun tauri
          args: ${{ format('--target {0}', matrix.tauriBuildTarget) }}
      - uses: actions/upload-artifact@v4
        with:
          name: desktop-${{ matrix.tauriBuildTarget }}
          path: |-
            ${{ join(fromJSON(steps.tauri.outputs.artifactPaths), '
            ') }}
          if-no-files-found: error

  release:
    if: needs.ci.outputs.shouldRelease != 'false'
    needs: [ci, cd-tauri]
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - run: bun install --frozen-lockfile
      - uses: actions/download-artifact@v4
        with:
          path: desktop/
          pattern: desktop-**
      - name: Prepare release
        uses: actions/github-script@v7
        with:
          script: (await import('${{ github.workspace }}/.github/scripts/prepareRelease.mjs')).default(context, '${{ needs.ci.outputs.appVersion }}', '${{ needs.ci.outputs.releaseVersion }}')
      - uses: softprops/action-gh-release@v2
        with:
          name: ExoShell ${{ needs.ci.outputs.releaseVersion }}
          draft: ${{ needs.ci.outputs.shouldRelease == 'draft' }}
          prerelease: ${{ needs.ci.outputs.shouldRelease == 'prerelease' || needs.ci.outputs.shouldRelease == 'draft' }}
          files: |
            latest.json
            desktop/**/*.tar.gz
            desktop/**/*.tar.gz.sig
            desktop/**/*.dmg
            desktop/**/*.deb
            desktop/**/*.AppImage
          fail_on_unmatched_files: true
          generate_release_notes: true
          make_latest: ${{ needs.ci.outputs.shouldRelease == 'stable' && 'true' || 'false' }}
